// @generated
// This file is automatically generated by Kanel. Do not modify manually.

import { z } from 'zod';

/** Identifier type for public.user */
export type UserId = string & { __brand: 'UserId' };

/** Represents the table public.user */
export default interface User {
  id: UserId;

  time_zone: string | null;

  locale: string | null;
}

/** Represents the initializer for the table public.user */
export interface UserInitializer {
  id: UserId;

  time_zone?: string | null;

  locale?: string | null;
}

/** Represents the mutator for the table public.user */
export interface UserMutator {
  id?: UserId;

  time_zone?: string | null;

  locale?: string | null;
}

export const userId = z.string() as unknown as z.Schema<UserId>;

export const user = z.object({
  id: userId,
  time_zone: z.string().nullable(),
  locale: z.string().nullable(),
}) as unknown as z.Schema<User>;

export const userInitializer = z.object({
  id: userId,
  time_zone: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
}) as unknown as z.Schema<UserInitializer>;

export const userMutator = z.object({
  id: userId.optional(),
  time_zone: z.string().optional().nullable(),
  locale: z.string().optional().nullable(),
}) as unknown as z.Schema<UserMutator>;
